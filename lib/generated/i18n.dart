import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get about => "About";
  String get all => "All";
  String get appName => "Fg";
  String get bottomNavigationBarTitle1 => "Trend";
  String get bottomNavigationBarTitle2 => "Star";
  String get bottomNavigationBarTitle3 => "Search";
  String get bottomNavigationBarTitle4 => "Me";
  String get cancel => "Cancel";
  String get daily => "daily";
  String get exit => "Exit";
  String get exit_n => "Clear All Data!";
  String get follower => "followers";
  String get followers => "Followers";
  String get following => "Following";
  String get forks => "forks";
  String get joined => "joined";
  String get key => "key";
  String get languages => "languages";
  String get login => "Login";
  String get monthly => "monthly";
  String get nameOrPassWordIsNotEmpty => "username or password is not empty!";
  String get order => "order";
  String get passWord => "PassWord";
  String get repositories => "Repositories";
  String get repository => "repositories";
  String get set => "Set";
  String get sort => "sort";
  String get star => "stars";
  String get stars => "Stars";
  String get updated => "Updated";
  String get updates => "updates";
  String get userName => "UserName";
  String get watches => "Watches";
  String get weekly => "weekly";
}

class $en extends S {
  const $en();
}

class $zh extends S {
  const $zh();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get passWord => "密码";
  @override
  String get cancel => "取消";
  @override
  String get nameOrPassWordIsNotEmpty => "用户名或者明白不能为空!";
  @override
  String get about => "关于";
  @override
  String get login => "登录";
  @override
  String get updates => "updates";
  @override
  String get repository => "repositories";
  @override
  String get weekly => "本周";
  @override
  String get repositories => "Repositories";
  @override
  String get key => "关键字";
  @override
  String get order => "排序顺序";
  @override
  String get all => "全部语言";
  @override
  String get forks => "forks";
  @override
  String get watches => "Watches";
  @override
  String get set => "设置";
  @override
  String get follower => "followers";
  @override
  String get languages => "编程语言";
  @override
  String get star => "stars";
  @override
  String get appName => "Fg";
  @override
  String get joined => "joined";
  @override
  String get exit_n => "退出将会清空所有信息!";
  @override
  String get stars => "Stars";
  @override
  String get sort => "排序依据";
  @override
  String get userName => "用户名";
  @override
  String get bottomNavigationBarTitle4 => "我";
  @override
  String get bottomNavigationBarTitle3 => "搜索";
  @override
  String get bottomNavigationBarTitle2 => "关注";
  @override
  String get exit => "退出";
  @override
  String get bottomNavigationBarTitle1 => "热点";
  @override
  String get followers => "Followers";
  @override
  String get following => "Following";
  @override
  String get daily => "今天";
  @override
  String get monthly => "本月";
  @override
  String get updated => "修改";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        case "zh":
          return SynchronousFuture<S>(const $zh());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
